var _user$project$Helpers$generateIdList = F2(
	function (len, list) {
		return _elm_lang$core$Native_Utils.eq(len, 0) ? list : {
			ctor: '::',
			_0: len,
			_1: A2(_user$project$Helpers$generateIdList, len - 1, list)
		};
	});
var _user$project$Helpers$makeItemDictionary = function (itemDatas) {
	var ids = A2(
		_elm_lang$core$List$map,
		_elm_lang$core$Basics$toString,
		A2(
			_user$project$Helpers$generateIdList,
			_elm_lang$core$List$length(itemDatas),
			{ctor: '[]'}));
	var pairs = A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		ids,
		itemDatas);
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p0, dict) {
				var _p1 = _p0;
				return A3(
					_elm_lang$core$Dict$insert,
					_p1._0,
					{isSelected: false, isMouseOver: false, data: _p1._1},
					dict);
			}),
		_elm_lang$core$Dict$empty,
		pairs);
};
var _user$project$Helpers$lookupAlbumArt = F2(
	function (currentSong, queueList) {
		var _p2 = A2(_elm_lang$core$Array$get, currentSong, queueList);
		if (_p2.ctor === 'Just') {
			var _p3 = _p2._0.data;
			if (_p3.ctor === 'Song') {
				return _user$project$Port$lookupAlbumArt(_p3._0.album);
			} else {
				return _elm_lang$core$Platform_Cmd$none;
			}
		} else {
			return _elm_lang$core$Platform_Cmd$none;
		}
	});
var _user$project$Helpers$isSong = function (item) {
	var _p4 = item.data;
	if (_p4.ctor === 'Song') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Helpers$getItemTitle = function (item) {
	var _p5 = item.data;
	if (_p5.ctor === 'Song') {
		return _p5._0.title;
	} else {
		return _p5._0.title;
	}
};
var _user$project$Helpers$makeGroupItemDictionary = function (groups) {
	return _user$project$Helpers$makeItemDictionary(
		A2(_elm_lang$core$List$map, _user$project$MyModels$Group, groups));
};
var _user$project$Helpers$makeSongItemDictionary = function (songs) {
	return _user$project$Helpers$makeItemDictionary(
		A2(_elm_lang$core$List$map, _user$project$MyModels$Song, songs));
};
var _user$project$Helpers$makeSongItemList = function (songs) {
	return A2(
		_elm_lang$core$List$map,
		function (s) {
			return {song: s, isSelected: false, isMouseOver: false};
		},
		songs);
};
var _user$project$Helpers$itemListToSongModelList = A2(
	_elm_lang$core$List$foldl,
	F2(
		function (item, acc) {
			var _p6 = item.data;
			if (_p6.ctor === 'Song') {
				return {ctor: '::', _0: _p6._0, _1: acc};
			} else {
				return acc;
			}
		}),
	{ctor: '[]'});
