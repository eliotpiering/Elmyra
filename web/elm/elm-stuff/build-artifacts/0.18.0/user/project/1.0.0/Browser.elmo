var _user$project$Browser$resetItems = _elm_lang$core$Dict$map(
	F2(
		function (id, item) {
			return _elm_lang$core$Tuple$first(
				A2(_user$project$Item$update, _user$project$Item$Reset, item));
		}));
var _user$project$Browser$initialModel = {isMouseOver: false, items: _elm_lang$core$Dict$empty};
var _user$project$Browser$Pos = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Browser$Upload = {ctor: 'Upload'};
var _user$project$Browser$GroupBy = function (a) {
	return {ctor: 'GroupBy', _0: a};
};
var _user$project$Browser$navigationView = A2(
	_elm_lang$html$Html$ul,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('navigation-view-container'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_user$project$Browser$GroupBy('album')),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Albums'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$Browser$GroupBy('artist')),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Artists'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$Browser$GroupBy('song')),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Songs'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Browser$Upload),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Upload (not working yet)'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Browser$MouseLeave = {ctor: 'MouseLeave'};
var _user$project$Browser$MouseEnter = {ctor: 'MouseEnter'};
var _user$project$Browser$UpdateSongs = function (a) {
	return {ctor: 'UpdateSongs', _0: a};
};
var _user$project$Browser$Reset = {ctor: 'Reset'};
var _user$project$Browser$ItemMsg = F2(
	function (a, b) {
		return {ctor: 'ItemMsg', _0: a, _1: b};
	});
var _user$project$Browser$itemToHtml = F2(
	function (maybePos, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._0;
		return A2(
			_elm_lang$html$Html$map,
			_user$project$Browser$ItemMsg(_p2),
			A3(_user$project$Item$view, maybePos, _p2, _p1._1));
	});
var _user$project$Browser$view = F2(
	function (maybePos, model) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('file-view-container'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Browser$navigationView,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$ul,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('scroll-box'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id('browser-list'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onMouseEnter(_user$project$Browser$MouseEnter),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onMouseLeave(_user$project$Browser$MouseLeave),
										_1: {
											ctor: '::',
											_0: _user$project$MyStyle$mouseOver(model.isMouseOver),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						A2(
							_elm_lang$core$List$map,
							_user$project$Browser$itemToHtml(maybePos),
							_user$project$SortSongs$byGroupTitle(
								_elm_lang$core$Dict$toList(model.items)))),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Browser$None = {ctor: 'None'};
var _user$project$Browser$ChangeRoute = function (a) {
	return {ctor: 'ChangeRoute', _0: a};
};
var _user$project$Browser$AddSong = function (a) {
	return {ctor: 'AddSong', _0: a};
};
var _user$project$Browser$OpenGroup = function (a) {
	return {ctor: 'OpenGroup', _0: a};
};
var _user$project$Browser$update = F3(
	function (msg, isShiftDown, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'ItemMsg':
				var _p8 = _p3._0;
				var _p4 = A2(_elm_lang$core$Dict$get, _p8, model.items);
				if (_p4.ctor === 'Just') {
					var _p5 = A2(_user$project$Item$update, _p3._1, _p4._0);
					var item_ = _p5._0;
					var itemCmd = _p5._1;
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{
							items: A3(_elm_lang$core$Dict$insert, _p8, item_, model.items)
						});
					var _p6 = itemCmd;
					switch (_p6.ctor) {
						case 'DoubleClicked':
							var _p7 = item_.data;
							if (_p7.ctor === 'Group') {
								return {
									ctor: '_Tuple2',
									_0: model_,
									_1: _user$project$Browser$OpenGroup(item_)
								};
							} else {
								return {
									ctor: '_Tuple2',
									_0: model_,
									_1: _user$project$Browser$AddSong(item_)
								};
							}
						case 'Clicked':
							if (isShiftDown) {
								return {ctor: '_Tuple2', _0: model_, _1: _user$project$Browser$None};
							} else {
								var cleanItems = _user$project$Browser$resetItems(model.items);
								var itemsWithOneSelected = A3(_elm_lang$core$Dict$insert, _p8, item_, cleanItems);
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{items: itemsWithOneSelected}),
									_1: _user$project$Browser$None
								};
							}
						default:
							return {ctor: '_Tuple2', _0: model_, _1: _user$project$Browser$None};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _user$project$Browser$None};
				}
			case 'Reset':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							items: _user$project$Browser$resetItems(model.items)
						}),
					_1: _user$project$Browser$None
				};
			case 'UpdateSongs':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{items: _p3._0}),
					_1: _user$project$Browser$None
				};
			case 'MouseEnter':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isMouseOver: true}),
					_1: _user$project$Browser$None
				};
			case 'MouseLeave':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{isMouseOver: false}),
					_1: _user$project$Browser$None
				};
			case 'GroupBy':
				var _p9 = _p3._0;
				switch (_p9) {
					case 'song':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _user$project$Browser$ChangeRoute(_user$project$NavigationParser$SongsRoute)
						};
					case 'album':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _user$project$Browser$ChangeRoute(_user$project$NavigationParser$AlbumsRoute)
						};
					case 'artist':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _user$project$Browser$ChangeRoute(_user$project$NavigationParser$ArtistsRoute)
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _user$project$Browser$None};
				}
			default:
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Browser$None};
		}
	});
