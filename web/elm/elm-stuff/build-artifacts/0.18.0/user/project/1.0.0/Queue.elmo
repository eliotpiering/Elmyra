var _user$project$Queue$getMaybeCurrentSong = function (model) {
	var _p0 = A2(_elm_lang$core$Array$get, model.currentSong, model.array);
	if (_p0.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(_p0._0.song);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Queue$currentSelected = function (model) {
	return _elm_lang$core$List$head(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Tuple$first,
			A2(
				_elm_lang$core$List$filter,
				function (_p1) {
					var _p2 = _p1;
					return _p2._1.isSelected;
				},
				_elm_lang$core$Array$toIndexedList(model.array))));
};
var _user$project$Queue$resetQueue = _elm_lang$core$Array$map(
	function (_p3) {
		return _elm_lang$core$Tuple$first(
			A2(_user$project$QueueItem$update, _user$project$QueueItem$Reset, _p3));
	});
var _user$project$Queue$Pos = F2(
	function (a, b) {
		return {x: a, y: b};
	});
var _user$project$Queue$NextSong = {ctor: 'NextSong'};
var _user$project$Queue$PreviousSong = {ctor: 'PreviousSong'};
var _user$project$Queue$Remove = function (a) {
	return {ctor: 'Remove', _0: a};
};
var _user$project$Queue$Reorder = function (a) {
	return {ctor: 'Reorder', _0: a};
};
var _user$project$Queue$Replace = F2(
	function (a, b) {
		return {ctor: 'Replace', _0: a, _1: b};
	});
var _user$project$Queue$Drop = function (a) {
	return {ctor: 'Drop', _0: a};
};
var _user$project$Queue$AudioMsg = function (a) {
	return {ctor: 'AudioMsg', _0: a};
};
var _user$project$Queue$audioPlayer = function (maybeSong) {
	var _p4 = maybeSong;
	if (_p4.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$map,
			_user$project$Queue$AudioMsg,
			_user$project$Audio$view(_p4._0));
	} else {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('audio-view-container'),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	}
};
var _user$project$Queue$QueueItemMsg = F2(
	function (a, b) {
		return {ctor: 'QueueItemMsg', _0: a, _1: b};
	});
var _user$project$Queue$itemToHtml = F2(
	function (currentSong, _p5) {
		var _p6 = _p5;
		var _p7 = _p6._0;
		return A2(
			_elm_lang$html$Html$map,
			_user$project$Queue$QueueItemMsg(_p7),
			A3(
				_user$project$QueueItem$view,
				_elm_lang$core$Native_Utils.eq(_p7, currentSong),
				_elm_lang$core$Basics$toString(_p7),
				_p6._1));
	});
var _user$project$Queue$MouseLeave = {ctor: 'MouseLeave'};
var _user$project$Queue$MouseEnter = {ctor: 'MouseEnter'};
var _user$project$Queue$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('queue-view-container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Queue$audioPlayer(
				_user$project$Queue$getMaybeCurrentSong(model)),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('scroll-box'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('queue-list'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onMouseEnter(_user$project$Queue$MouseEnter),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onMouseLeave(_user$project$Queue$MouseLeave),
									_1: {
										ctor: '::',
										_0: _user$project$MyStyle$mouseOver(model.mouseOver),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					_elm_lang$core$Array$toList(
						A2(
							_elm_lang$core$Array$indexedMap,
							F2(
								function (id, item) {
									return A2(
										_user$project$Queue$itemToHtml,
										model.currentSong,
										{ctor: '_Tuple2', _0: id, _1: item});
								}),
							model.array))),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Queue$None = {ctor: 'None'};
var _user$project$Queue$SwapItems = function (a) {
	return {ctor: 'SwapItems', _0: a};
};
var _user$project$Queue$ChangeCurrentSong = function (a) {
	return {ctor: 'ChangeCurrentSong', _0: a};
};
var _user$project$Queue$nextSong = function (model) {
	var newCurrentSong = model.currentSong + 1;
	return {
		ctor: '_Tuple2',
		_0: model,
		_1: _user$project$Queue$ChangeCurrentSong(newCurrentSong)
	};
};
var _user$project$Queue$RemoveItem = function (a) {
	return {ctor: 'RemoveItem', _0: a};
};
var _user$project$Queue$update = F2(
	function (msg, model) {
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'MouseEnter':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mouseOver: true}),
					_1: _user$project$Queue$None
				};
			case 'MouseLeave':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mouseOver: false}),
					_1: _user$project$Queue$None
				};
			case 'QueueItemMsg':
				var _p12 = _p8._0;
				var _p9 = A2(_elm_lang$core$Array$get, _p12, model.array);
				if (_p9.ctor === 'Just') {
					var _p10 = A2(_user$project$QueueItem$update, _p8._1, _p9._0);
					var song_ = _p10._0;
					var queueItemCmd = _p10._1;
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{
							array: A3(_elm_lang$core$Array$set, _p12, song_, model.array)
						});
					var _p11 = queueItemCmd;
					if (_p11.ctor === 'Just') {
						switch (_p11._0.ctor) {
							case 'DoubleClicked':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model_,
										{
											array: _user$project$Queue$resetQueue(model_.array)
										}),
									_1: _user$project$Queue$ChangeCurrentSong(_p12)
								};
							case 'RemoveItem':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model_,
										{
											array: _user$project$Queue$resetQueue(model_.array)
										}),
									_1: _user$project$Queue$RemoveItem(_p12)
								};
							case 'Clicked':
								var newArray = A3(
									_elm_lang$core$Array$set,
									_p12,
									song_,
									_user$project$Queue$resetQueue(model_.array));
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model_,
										{array: newArray}),
									_1: _user$project$Queue$None
								};
							case 'ShiftItemUp':
								return (!_elm_lang$core$Native_Utils.eq(_p12, 0)) ? {
									ctor: '_Tuple2',
									_0: model_,
									_1: _user$project$Queue$SwapItems(
										{ctor: '_Tuple2', _0: _p12, _1: _p12 - 1})
								} : {ctor: '_Tuple2', _0: model_, _1: _user$project$Queue$None};
							default:
								return (!_elm_lang$core$Native_Utils.eq(
									_p12,
									_elm_lang$core$Array$length(model_.array) - 1)) ? {
									ctor: '_Tuple2',
									_0: model_,
									_1: _user$project$Queue$SwapItems(
										{ctor: '_Tuple2', _0: _p12, _1: _p12 + 1})
								} : {ctor: '_Tuple2', _0: model_, _1: _user$project$Queue$None};
						}
					} else {
						return {ctor: '_Tuple2', _0: model_, _1: _user$project$Queue$None};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _user$project$Queue$None};
				}
			case 'Drop':
				var newArrayItems = _elm_lang$core$Array$fromList(_p8._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							array: _user$project$Queue$resetQueue(
								A2(_elm_lang$core$Array$append, model.array, newArrayItems))
						}),
					_1: _user$project$Queue$None
				};
			case 'Replace':
				var newArrayItems = A2(
					_elm_lang$core$Debug$log,
					'array',
					_elm_lang$core$Array$fromList(_p8._0));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{array: newArrayItems, currentSong: _p8._1}),
					_1: _user$project$Queue$None
				};
			case 'Reorder':
				var _p13 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					A3(
						_elm_lang$core$Json_Decode$map2,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						A2(_elm_lang$core$Json_Decode$field, 'from', _elm_lang$core$Json_Decode$int),
						A2(_elm_lang$core$Json_Decode$field, 'to', _elm_lang$core$Json_Decode$int)),
					_p8._0);
				if (_p13.ctor === 'Ok') {
					var _p17 = _p13._0._1;
					var _p16 = _p13._0._0;
					var array = model.array;
					var maybeFromItem = A2(_elm_lang$core$Array$get, _p16, array);
					var maybeToItem = A2(_elm_lang$core$Array$get, _p17, array);
					var _p14 = maybeFromItem;
					if (_p14.ctor === 'Just') {
						var _p15 = maybeToItem;
						if (_p15.ctor === 'Just') {
							var array_ = A3(
								_elm_lang$core$Array$set,
								_p17,
								_p14._0,
								A3(_elm_lang$core$Array$set, _p16, _p15._0, array));
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{array: array_}),
								_1: _user$project$Queue$None
							};
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _user$project$Queue$None};
						}
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _user$project$Queue$None};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _user$project$Queue$None};
				}
			case 'Remove':
				var _p18 = A2(
					_elm_lang$core$Json_Decode$decodeValue,
					A2(_elm_lang$core$Json_Decode$field, 'body', _elm_lang$core$Json_Decode$int),
					_p8._0);
				if (_p18.ctor === 'Ok') {
					var _p20 = _p18._0;
					var _p19 = A2(_elm_lang$core$Array$get, _p20, model.array);
					if (_p19.ctor === 'Just') {
						var array_ = A2(_elm_community$array_extra$Array_Extra$removeAt, _p20, model.array);
						var newQueueIndex = (_elm_lang$core$Native_Utils.cmp(_p20, model.currentSong) < 0) ? (model.currentSong - 1) : model.currentSong;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									array: _user$project$Queue$resetQueue(array_),
									currentSong: newQueueIndex
								}),
							_1: _user$project$Queue$None
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _user$project$Queue$None};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _user$project$Queue$None};
				}
			case 'NextSong':
				return _user$project$Queue$nextSong(model);
			case 'PreviousSong':
				var newCurrentSong = model.currentSong - 1;
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Queue$ChangeCurrentSong(newCurrentSong)
				};
			default:
				var _p21 = _p8._0;
				return _user$project$Queue$nextSong(model);
		}
	});
