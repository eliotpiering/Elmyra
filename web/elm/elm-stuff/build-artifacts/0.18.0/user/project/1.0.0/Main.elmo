var _user$project$Main$currentMouseLocation = function (model) {
	return model.browser.isMouseOver ? _user$project$MyModels$BrowserWindow : (model.queue.mouseOver ? _user$project$MyModels$QueueWindow : _user$project$MyModels$OtherWindow);
};
var _user$project$Main$replaceQueue = F2(
	function (raw, model) {
		var _p0 = _user$project$ApiHelpers$decodeQueue(raw);
		if (_p0.ctor === 'Ok') {
			var _p2 = _p0._0;
			var queueItems = A2(
				_elm_lang$core$Debug$log,
				'queue',
				_user$project$Helpers$makeSongItemList(_p2.songs));
			var _p1 = A2(
				_user$project$Queue$update,
				A2(_user$project$Queue$Replace, queueItems, _p2.currentSong),
				model.queue);
			var queue_ = _p1._0;
			var queueCmd = _p1._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{queue: queue_}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			var blah = A2(_elm_lang$core$Debug$log, 'hello', _p0._0);
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$queueChannel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('queue:lobby');
var _user$project$Main$chatChannel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('room:lobby');
var _user$project$Main$socketServer = 'ws://localhost:4000/socket/websocket';
var _user$project$Main$initialModel = function (socket) {
	return {
		queue: {currentSong: 0, array: _elm_lang$core$Array$empty, mouseOver: false, mouseOverItem: 1},
		browser: _user$project$Browser$initialModel,
		chat: _user$project$Chat$initialModel,
		albumArt: 'nothing',
		currentMousePos: {x: 0, y: 0},
		keysBeingTyped: '',
		isShiftDown: false,
		socket: socket
	};
};
var _user$project$Main$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {browser: a, queue: b, chat: c, albumArt: d, currentMousePos: e, keysBeingTyped: f, isShiftDown: g, socket: h};
	});
var _user$project$Main$ReceiveChangeCurrentSong = function (a) {
	return {ctor: 'ReceiveChangeCurrentSong', _0: a};
};
var _user$project$Main$SendChangeCurrentSong = function (a) {
	return {ctor: 'SendChangeCurrentSong', _0: a};
};
var _user$project$Main$SendSwapSongs = F2(
	function (a, b) {
		return {ctor: 'SendSwapSongs', _0: a, _1: b};
	});
var _user$project$Main$ReceiveSwapSongs = function (a) {
	return {ctor: 'ReceiveSwapSongs', _0: a};
};
var _user$project$Main$ReceiveSync = function (a) {
	return {ctor: 'ReceiveSync', _0: a};
};
var _user$project$Main$SendRemoveSong = function (a) {
	return {ctor: 'SendRemoveSong', _0: a};
};
var _user$project$Main$ReceiveRemoveSong = function (a) {
	return {ctor: 'ReceiveRemoveSong', _0: a};
};
var _user$project$Main$SendAddSongs = function (a) {
	return {ctor: 'SendAddSongs', _0: a};
};
var _user$project$Main$ReceiveAddSongs = function (a) {
	return {ctor: 'ReceiveAddSongs', _0: a};
};
var _user$project$Main$SendPreviousSong = {ctor: 'SendPreviousSong'};
var _user$project$Main$ReceivePreviousSong = function (a) {
	return {ctor: 'ReceivePreviousSong', _0: a};
};
var _user$project$Main$SendNextSong = {ctor: 'SendNextSong'};
var _user$project$Main$ReceiveNextSong = function (a) {
	return {ctor: 'ReceiveNextSong', _0: a};
};
var _user$project$Main$ReceiveChatMessage = function (a) {
	return {ctor: 'ReceiveChatMessage', _0: a};
};
var _user$project$Main$initialSocket = function () {
	var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'sync', 'queue:lobby');
	var _p3 = A2(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$join,
		_user$project$Main$chatChannel,
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			'sync',
			'queue:lobby',
			_user$project$Main$ReceiveSync,
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'change_current_song',
				'queue:lobby',
				_user$project$Main$ReceiveChangeCurrentSong,
				A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					'swap_songs',
					'queue:lobby',
					_user$project$Main$ReceiveSwapSongs,
					A4(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
						'remove_song',
						'queue:lobby',
						_user$project$Main$ReceiveRemoveSong,
						A4(
							_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
							'add_songs',
							'queue:lobby',
							_user$project$Main$ReceiveAddSongs,
							A4(
								_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
								'previous_song',
								'queue:lobby',
								_user$project$Main$ReceivePreviousSong,
								A4(
									_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
									'next_song',
									'queue:lobby',
									_user$project$Main$ReceiveNextSong,
									A4(
										_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
										'new:msg',
										'room:lobby',
										_user$project$Main$ReceiveChatMessage,
										_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
											_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(_user$project$Main$socketServer)))))))))));
	var socketMsg = _p3._0;
	var socketCmd = _p3._1;
	var _p4 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, _user$project$Main$queueChannel, socketMsg);
	var socketMsg_ = _p4._0;
	var socketCmd_ = _p4._1;
	var _p5 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, socketMsg_);
	var socketMsg__ = _p5._0;
	var socketCmd__ = _p5._1;
	return {
		ctor: '_Tuple2',
		_0: socketMsg__,
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: socketCmd__,
				_1: {
					ctor: '::',
					_0: socketCmd_,
					_1: {
						ctor: '::',
						_0: socketCmd,
						_1: {ctor: '[]'}
					}
				}
			})
	};
}();
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$init = function (location) {
	var _p6 = _user$project$Main$initialSocket;
	var socket = _p6._0;
	var socketCmd = _p6._1;
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$initialModel(socket),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
	};
};
var _user$project$Main$UrlUpdate = function (a) {
	return {ctor: 'UrlUpdate', _0: a};
};
var _user$project$Main$ResetKeysBeingTyped = function (a) {
	return {ctor: 'ResetKeysBeingTyped', _0: a};
};
var _user$project$Main$UpdateAlbumArt = function (a) {
	return {ctor: 'UpdateAlbumArt', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Port$resetKeysBeingTyped(_user$project$Main$ResetKeysBeingTyped),
			_1: {
				ctor: '::',
				_0: _user$project$Port$updateAlbumArt(_user$project$Main$UpdateAlbumArt),
				_1: {
					ctor: '::',
					_0: _elm_lang$keyboard$Keyboard$ups(_user$project$Main$KeyUp),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
						_1: {
							ctor: '::',
							_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.socket, _user$project$Main$PhoenixMsg),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$UpdateGroups = function (a) {
	return {ctor: 'UpdateGroups', _0: a};
};
var _user$project$Main$OpenSongsInBrowser = function (a) {
	return {ctor: 'OpenSongsInBrowser', _0: a};
};
var _user$project$Main$AddSongToQueue = function (a) {
	return {ctor: 'AddSongToQueue', _0: a};
};
var _user$project$Main$AddSongsToQueue = function (a) {
	return {ctor: 'AddSongsToQueue', _0: a};
};
var _user$project$Main$UpdateSongs = function (a) {
	return {ctor: 'UpdateSongs', _0: a};
};
var _user$project$Main$update = F2(
	function (action, model) {
		update:
		while (true) {
			var _p7 = action;
			switch (_p7.ctor) {
				case 'KeyUp':
					var _p8 = _p7._0;
					switch (_p8) {
						case 37:
							var _v3 = _user$project$Main$SendPreviousSong,
								_v4 = model;
							action = _v3;
							model = _v4;
							continue update;
						case 39:
							var _v5 = _user$project$Main$SendNextSong,
								_v6 = model;
							action = _v5;
							model = _v6;
							continue update;
						case 32:
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$Port$pause('null')
							};
						case 16:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{isShiftDown: false}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'KeyDown':
					var _p9 = _p7._0;
					if (_p9 === 16) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{isShiftDown: true}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ResetKeysBeingTyped':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{keysBeingTyped: ''}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'QueueMsg':
					var _p10 = A2(_user$project$Queue$update, _p7._0, model.queue);
					var queue_ = _p10._0;
					var queueCmd = _p10._1;
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{queue: queue_});
					var _p11 = queueCmd;
					switch (_p11.ctor) {
						case 'RemoveItem':
							var _v9 = _user$project$Main$SendRemoveSong(_p11._0),
								_v10 = model_;
							action = _v9;
							model = _v10;
							continue update;
						case 'SwapItems':
							var _v11 = A2(_user$project$Main$SendSwapSongs, _p11._0._0, _p11._0._1),
								_v12 = model_;
							action = _v11;
							model = _v12;
							continue update;
						case 'ChangeCurrentSong':
							var _v13 = _user$project$Main$SendChangeCurrentSong(_p11._0),
								_v14 = model_;
							action = _v13;
							model = _v14;
							continue update;
						default:
							return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'BrowserMsg':
					var _p12 = A3(_user$project$Browser$update, _p7._0, model.isShiftDown, model.browser);
					var browser_ = _p12._0;
					var browserCmd = _p12._1;
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{browser: browser_});
					var _p13 = browserCmd;
					switch (_p13.ctor) {
						case 'AddItemToQueue':
							var _p16 = _p13._0;
							var _p14 = _p16.data;
							if (_p14.ctor === 'Song') {
								var _p15 = A2(
									_user$project$Main$update,
									_user$project$Main$SendAddSongs(
										{
											ctor: '::',
											_0: _p14._0,
											_1: {ctor: '[]'}
										}),
									model);
								var model_ = _p15._0;
								var socketCmds = _p15._1;
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model_,
										{
											browser: _elm_lang$core$Tuple$first(
												A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model_.browser))
										}),
									_1: socketCmds
								};
							} else {
								var updateGroupCmds = _elm_lang$core$Platform_Cmd$batch(
									A2(
										_user$project$ApiHelpers$fetchSongsFromGroups,
										{
											ctor: '::',
											_0: _p16,
											_1: {ctor: '[]'}
										},
										_user$project$Main$AddSongsToQueue));
								return {ctor: '_Tuple2', _0: model_, _1: updateGroupCmds};
							}
						case 'OpenGroup':
							var _p17 = _p13._0.data;
							if (_p17.ctor === 'Song') {
								return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							} else {
								var _p18 = _p17._0;
								return {
									ctor: '_Tuple2',
									_0: model_,
									_1: _elm_lang$navigation$Navigation$newUrl(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'#',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p18.kind,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'/',
													_elm_lang$core$Basics$toString(_p18.id)))))
								};
							}
						case 'ChangeRoute':
							var _p19 = _p13._0;
							switch (_p19.ctor) {
								case 'SongsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#songs')
									};
								case 'AlbumsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#albums')
									};
								case 'ArtistsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#artists')
									};
								default:
									return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'SendUpload':
							return {
								ctor: '_Tuple2',
								_0: model_,
								_1: _user$project$Port$upload('now')
							};
						default:
							return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ChatMsg':
					var _p20 = A2(_user$project$Chat$update, _p7._0, model.chat);
					var chat_ = _p20._0;
					var chatCmd = _p20._1;
					var _p21 = chatCmd;
					if (_p21.ctor === 'PushMessage') {
						var payload = _elm_lang$core$Json_Encode$object(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'body',
									_1: _elm_lang$core$Json_Encode$string(_p21._0)
								},
								_1: {ctor: '[]'}
							});
						var push_ = A2(
							_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
							payload,
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'new:msg', 'room:lobby'));
						var _p22 = A2(
							_elm_lang$core$Debug$log,
							'socket and cmd are ',
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket));
						var socket_ = _p22._0;
						var socketCmd = _p22._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{chat: chat_, socket: socket_}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{chat: chat_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'UpdateSongs':
					if (_p7._0.ctor === 'Ok') {
						var browser = _user$project$Browser$initialModel;
						var browser_ = _elm_lang$core$Native_Utils.update(
							browser,
							{
								items: _user$project$Helpers$makeSongItemDictionary(_p7._0._0)
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'UpdateGroups':
					if (_p7._0.ctor === 'Ok') {
						var browser = _user$project$Browser$initialModel;
						var browser_ = _elm_lang$core$Native_Utils.update(
							browser,
							{
								items: _user$project$Helpers$makeGroupItemDictionary(_p7._0._0)
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddSongsToQueue':
					if (_p7._0.ctor === 'Ok') {
						var sortedSongs = _user$project$SortSongs$byAlbumAndTrack(_p7._0._0);
						var _p23 = A2(
							_user$project$Main$update,
							_user$project$Main$SendAddSongs(sortedSongs),
							model);
						var model_ = _p23._0;
						var socketCmds = _p23._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{
									browser: _elm_lang$core$Tuple$first(
										A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model_.browser))
								}),
							_1: socketCmds
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddSongToQueue':
					if (_p7._0.ctor === 'Ok') {
						var _p24 = A2(
							_user$project$Main$update,
							_user$project$Main$SendAddSongs(
								{
									ctor: '::',
									_0: _p7._0._0,
									_1: {ctor: '[]'}
								}),
							model);
						var model_ = _p24._0;
						var socketCmds = _p24._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{
									browser: _elm_lang$core$Tuple$first(
										A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model.browser))
								}),
							_1: socketCmds
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'OpenSongsInBrowser':
					if (_p7._0.ctor === 'Ok') {
						var newItems = _user$project$Helpers$makeSongItemDictionary(_p7._0._0);
						var _p25 = A3(
							_user$project$Browser$update,
							_user$project$Browser$UpdateSongs(newItems),
							model.isShiftDown,
							model.browser);
						var browser_ = _p25._0;
						var browserCmd = _p25._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'UpdateAlbumArt':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{albumArt: _p7._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UrlUpdate':
					var _p26 = _user$project$NavigationParser$urlParser(_p7._0);
					switch (_p26.ctor) {
						case 'ArtistsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllArtists(_user$project$Main$UpdateGroups)
							};
						case 'AlbumsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllAlbums(_user$project$Main$UpdateGroups)
							};
						case 'SongsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllSongs(_user$project$Main$UpdateSongs)
							};
						case 'ArtistRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: A2(_user$project$ApiHelpers$fetchSongsFromArtist, _p26._0, _user$project$Main$OpenSongsInBrowser)
							};
						case 'AlbumRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: A2(_user$project$ApiHelpers$fetchSongsFromAlbum, _p26._0, _user$project$Main$OpenSongsInBrowser)
							};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'PhoenixMsg':
					var _p27 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p7._0, model.socket);
					var socket_ = _p27._0;
					var phxCmd = _p27._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
					};
				case 'ReceiveChatMessage':
					var _p28 = A2(
						_user$project$Chat$update,
						_user$project$Chat$ReceiveMessage(_p7._0),
						model.chat);
					var chat_ = _p28._0;
					var chatCmd = _p28._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{chat: chat_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ReceiveNextSong':
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
				case 'SendNextSong':
					var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'next_song', 'queue:lobby');
					var _p29 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p29._0;
					var socketCmd = _p29._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceivePreviousSong':
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
				case 'SendPreviousSong':
					var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'previous_song', 'queue:lobby');
					var _p30 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p30._0;
					var socketCmd = _p30._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveAddSongs':
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
				case 'SendAddSongs':
					var json = _user$project$ApiHelpers$songsEncoder(
						_user$project$SortSongs$byAlbumAndTrack(_p7._0));
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						json,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'add_songs', 'queue:lobby'));
					var _p31 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p31._0;
					var socketCmd = _p31._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveRemoveSong':
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
				case 'SendRemoveSong':
					var payload = _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'body',
								_1: _elm_lang$core$Json_Encode$int(_p7._0)
							},
							_1: {ctor: '[]'}
						});
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						payload,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'remove_song', 'queue:lobby'));
					var _p32 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p32._0;
					var socketCmd = _p32._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveSwapSongs':
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
				case 'SendSwapSongs':
					var payload = _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'from',
								_1: _elm_lang$core$Json_Encode$int(_p7._0)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'to',
									_1: _elm_lang$core$Json_Encode$int(_p7._1)
								},
								_1: {ctor: '[]'}
							}
						});
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						payload,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'swap_songs', 'queue:lobby'));
					var _p33 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p33._0;
					var socketCmd = _p33._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveChangeCurrentSong':
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
				case 'SendChangeCurrentSong':
					var payload = _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'current_song',
								_1: _elm_lang$core$Json_Encode$int(_p7._0)
							},
							_1: {ctor: '[]'}
						});
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						payload,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'change_current_song', 'queue:lobby'));
					var _p34 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p34._0;
					var socketCmd = _p34._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				default:
					return A2(_user$project$Main$replaceQueue, _p7._0, model);
			}
		}
	});
var _user$project$Main$ChatMsg = function (a) {
	return {ctor: 'ChatMsg', _0: a};
};
var _user$project$Main$chatView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$ChatMsg,
		_user$project$Chat$view(model.chat));
};
var _user$project$Main$BrowserMsg = function (a) {
	return {ctor: 'BrowserMsg', _0: a};
};
var _user$project$Main$browserView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$BrowserMsg,
		_user$project$Browser$view(model.browser));
};
var _user$project$Main$QueueMsg = function (a) {
	return {ctor: 'QueueMsg', _0: a};
};
var _user$project$Main$queueView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$QueueMsg,
		_user$project$Queue$view(model.queue));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('main-container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$browserView(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$queueView(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$chatView(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$UrlUpdate,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
