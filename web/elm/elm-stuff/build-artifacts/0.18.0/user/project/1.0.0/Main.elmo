var _user$project$Main$currentMouseLocation = function (model) {
	return model.browser.isMouseOver ? _user$project$MyModels$BrowserWindow : (model.queue.mouseOver ? _user$project$MyModels$QueueWindow : _user$project$MyModels$OtherWindow);
};
var _user$project$Main$queueChannel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('queue:lobby');
var _user$project$Main$chatChannel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('room:lobby');
var _user$project$Main$socketServer = 'ws://localhost:4000/socket/websocket';
var _user$project$Main$initialModel = function (socket) {
	return {
		queue: {currentSong: 0, array: _elm_lang$core$Array$empty, mouseOver: false, mouseOverItem: 1},
		browser: _user$project$Browser$initialModel,
		chat: _user$project$Chat$initialModel,
		albumArt: 'nothing',
		currentMousePos: {x: 0, y: 0},
		dragStart: _elm_lang$core$Maybe$Nothing,
		keysBeingTyped: '',
		isShiftDown: false,
		socket: socket
	};
};
var _user$project$Main$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {browser: a, queue: b, chat: c, albumArt: d, currentMousePos: e, dragStart: f, keysBeingTyped: g, isShiftDown: h, socket: i};
	});
var _user$project$Main$SendAddSongs = function (a) {
	return {ctor: 'SendAddSongs', _0: a};
};
var _user$project$Main$ReceiveAddSongs = function (a) {
	return {ctor: 'ReceiveAddSongs', _0: a};
};
var _user$project$Main$SendPreviousSong = {ctor: 'SendPreviousSong'};
var _user$project$Main$ReceivePreviousSong = function (a) {
	return {ctor: 'ReceivePreviousSong', _0: a};
};
var _user$project$Main$SendNextSong = {ctor: 'SendNextSong'};
var _user$project$Main$ReceiveNextSong = function (a) {
	return {ctor: 'ReceiveNextSong', _0: a};
};
var _user$project$Main$ReceiveChatMessage = function (a) {
	return {ctor: 'ReceiveChatMessage', _0: a};
};
var _user$project$Main$initialSocket = function () {
	var _p0 = A2(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$join,
		_user$project$Main$chatChannel,
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			'add_songs',
			'queue:lobby',
			_user$project$Main$ReceiveAddSongs,
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'previous_song',
				'queue:lobby',
				_user$project$Main$ReceivePreviousSong,
				A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					'next_song',
					'queue:lobby',
					_user$project$Main$ReceiveNextSong,
					A4(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
						'new:msg',
						'room:lobby',
						_user$project$Main$ReceiveChatMessage,
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
							_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(_user$project$Main$socketServer)))))));
	var socketMsg = _p0._0;
	var socketCmd = _p0._1;
	var _p1 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, _user$project$Main$queueChannel, socketMsg);
	var socketMsg_ = _p1._0;
	var socketCmd_ = _p1._1;
	return {
		ctor: '_Tuple2',
		_0: socketMsg_,
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: socketCmd,
				_1: {
					ctor: '::',
					_0: socketCmd_,
					_1: {ctor: '[]'}
				}
			})
	};
}();
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$init = function (location) {
	var _p2 = _user$project$Main$initialSocket;
	var socket = _p2._0;
	var socketCmd = _p2._1;
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$initialModel(socket),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
	};
};
var _user$project$Main$UrlUpdate = function (a) {
	return {ctor: 'UrlUpdate', _0: a};
};
var _user$project$Main$ResetKeysBeingTyped = function (a) {
	return {ctor: 'ResetKeysBeingTyped', _0: a};
};
var _user$project$Main$UpdateAlbumArt = function (a) {
	return {ctor: 'UpdateAlbumArt', _0: a};
};
var _user$project$Main$MouseMoves = function (a) {
	return {ctor: 'MouseMoves', _0: a};
};
var _user$project$Main$MouseUps = function (a) {
	return {ctor: 'MouseUps', _0: a};
};
var _user$project$Main$MouseDowns = function (a) {
	return {ctor: 'MouseDowns', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Port$resetKeysBeingTyped(_user$project$Main$ResetKeysBeingTyped),
			_1: {
				ctor: '::',
				_0: _user$project$Port$updateAlbumArt(_user$project$Main$UpdateAlbumArt),
				_1: {
					ctor: '::',
					_0: _elm_lang$keyboard$Keyboard$ups(_user$project$Main$KeyUp),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
						_1: {
							ctor: '::',
							_0: _elm_lang$mouse$Mouse$downs(_user$project$Main$MouseDowns),
							_1: {
								ctor: '::',
								_0: _elm_lang$mouse$Mouse$ups(_user$project$Main$MouseUps),
								_1: {
									ctor: '::',
									_0: _elm_lang$mouse$Mouse$moves(_user$project$Main$MouseMoves),
									_1: {
										ctor: '::',
										_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.socket, _user$project$Main$PhoenixMsg),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$UpdateGroups = function (a) {
	return {ctor: 'UpdateGroups', _0: a};
};
var _user$project$Main$OpenSongsInBrowser = function (a) {
	return {ctor: 'OpenSongsInBrowser', _0: a};
};
var _user$project$Main$AddSongToQueue = function (a) {
	return {ctor: 'AddSongToQueue', _0: a};
};
var _user$project$Main$AddSongsToQueue = function (a) {
	return {ctor: 'AddSongsToQueue', _0: a};
};
var _user$project$Main$UpdateSongs = function (a) {
	return {ctor: 'UpdateSongs', _0: a};
};
var _user$project$Main$update = F2(
	function (action, model) {
		update:
		while (true) {
			var _p3 = action;
			switch (_p3.ctor) {
				case 'KeyUp':
					var textSearchUpdateHelper = function (code) {
						var maybefirstMatch = _elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (_p4) {
									var _p5 = _p4;
									return A2(
										_elm_lang$core$String$startsWith,
										model.keysBeingTyped,
										_elm_lang$core$String$toUpper(
											_user$project$Helpers$getItemTitle(_p5._1)));
								},
								_elm_lang$core$Dict$toList(model.browser.items)));
						var cString = _elm_lang$core$String$fromChar(
							_elm_lang$core$Char$fromCode(code));
						var _p6 = maybefirstMatch;
						if (_p6.ctor === 'Just') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										keysBeingTyped: A2(_elm_lang$core$Basics_ops['++'], model.keysBeingTyped, cString)
									}),
								_1: _user$project$Port$scrollToElement(
									A2(_elm_lang$core$Basics_ops['++'], 'group-item-', _p6._0._0))
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$Port$scrollToElement('no-id')
							};
						}
					};
					var _p7 = _p3._0;
					switch (_p7) {
						case 37:
							var _v4 = _user$project$Main$SendPreviousSong,
								_v5 = model;
							action = _v4;
							model = _v5;
							continue update;
						case 39:
							var _v6 = _user$project$Main$SendNextSong,
								_v7 = model;
							action = _v6;
							model = _v7;
							continue update;
						case 32:
							return (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$String$length(model.keysBeingTyped),
								0) > 0) ? textSearchUpdateHelper(32) : {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$Port$pause('null')
							};
						case 16:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{isShiftDown: false}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						default:
							return textSearchUpdateHelper(_p7);
					}
				case 'KeyDown':
					var _p8 = _p3._0;
					if (_p8 === 16) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{isShiftDown: true}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ResetKeysBeingTyped':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{keysBeingTyped: ''}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'QueueMsg':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								queue: A2(_user$project$Queue$update, _p3._0, model.queue)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'BrowserMsg':
					var _p9 = A3(_user$project$Browser$update, _p3._0, model.isShiftDown, model.browser);
					var browser_ = _p9._0;
					var browserCmd = _p9._1;
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{browser: browser_});
					var _p10 = browserCmd;
					switch (_p10.ctor) {
						case 'AddSong':
							var _p11 = _p10._0.data;
							if (_p11.ctor === 'Song') {
								var songItemModels = _user$project$Helpers$makeSongItemList(
									{
										ctor: '::',
										_0: _p11._0,
										_1: {ctor: '[]'}
									});
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model_,
										{
											queue: A2(
												_user$project$Queue$update,
												_user$project$Queue$Drop(songItemModels),
												model.queue)
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'OpenGroup':
							var _p12 = _p10._0.data;
							if (_p12.ctor === 'Song') {
								return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							} else {
								var _p13 = _p12._0;
								return {
									ctor: '_Tuple2',
									_0: model_,
									_1: _elm_lang$navigation$Navigation$newUrl(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'#',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p13.kind,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'/',
													_elm_lang$core$Basics$toString(_p13.id)))))
								};
							}
						case 'ChangeRoute':
							var _p14 = _p10._0;
							switch (_p14.ctor) {
								case 'SongsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#songs')
									};
								case 'AlbumsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#albums')
									};
								case 'ArtistsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#artists')
									};
								default:
									return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							}
						default:
							return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ChatMsg':
					var _p15 = A2(_user$project$Chat$update, _p3._0, model.chat);
					var chat_ = _p15._0;
					var chatCmd = _p15._1;
					var _p16 = chatCmd;
					if (_p16.ctor === 'PushMessage') {
						var payload = _elm_lang$core$Json_Encode$object(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'body',
									_1: _elm_lang$core$Json_Encode$string(_p16._0)
								},
								_1: {ctor: '[]'}
							});
						var push_ = A2(
							_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
							payload,
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'new:msg', 'room:lobby'));
						var _p17 = A2(
							_elm_lang$core$Debug$log,
							'socket and cmd are ',
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket));
						var socket_ = _p17._0;
						var socketCmd = _p17._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{chat: chat_, socket: socket_}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{chat: chat_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'UpdateSongs':
					if (_p3._0.ctor === 'Ok') {
						var browser = _user$project$Browser$initialModel;
						var browser_ = _elm_lang$core$Native_Utils.update(
							browser,
							{
								items: _user$project$Helpers$makeSongItemDictionary(_p3._0._0)
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'UpdateGroups':
					if (_p3._0.ctor === 'Ok') {
						var browser = _user$project$Browser$initialModel;
						var browser_ = _elm_lang$core$Native_Utils.update(
							browser,
							{
								items: _user$project$Helpers$makeGroupItemDictionary(_p3._0._0)
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddSongsToQueue':
					if (_p3._0.ctor === 'Ok') {
						var model_ = _elm_lang$core$Native_Utils.update(
							model,
							{dragStart: _elm_lang$core$Maybe$Nothing});
						var newItems = _user$project$Helpers$makeSongItemList(_p3._0._0);
						var queue_ = A2(
							_user$project$Queue$update,
							_user$project$Queue$Drop(newItems),
							model_.queue);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{
									queue: queue_,
									browser: _elm_lang$core$Tuple$first(
										A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model.browser))
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddSongToQueue':
					if (_p3._0.ctor === 'Ok') {
						var model_ = _elm_lang$core$Native_Utils.update(
							model,
							{dragStart: _elm_lang$core$Maybe$Nothing});
						var newItems = _user$project$Helpers$makeSongItemList(
							{
								ctor: '::',
								_0: _p3._0._0,
								_1: {ctor: '[]'}
							});
						var queue_ = A2(
							_user$project$Queue$update,
							_user$project$Queue$Drop(newItems),
							model_.queue);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{
									queue: queue_,
									browser: _elm_lang$core$Tuple$first(
										A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model.browser))
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'OpenSongsInBrowser':
					if (_p3._0.ctor === 'Ok') {
						var model_ = _elm_lang$core$Native_Utils.update(
							model,
							{dragStart: _elm_lang$core$Maybe$Nothing});
						var newItems = _user$project$Helpers$makeSongItemDictionary(_p3._0._0);
						var _p18 = A3(
							_user$project$Browser$update,
							_user$project$Browser$UpdateSongs(newItems),
							model.isShiftDown,
							model_.browser);
						var browser_ = _p18._0;
						var browserCmd = _p18._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'MouseDowns':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								dragStart: _elm_lang$core$Maybe$Just(
									_user$project$Main$currentMouseLocation(model))
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'MouseUps':
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{dragStart: _elm_lang$core$Maybe$Nothing});
					var dragEnd = _user$project$Main$currentMouseLocation(model);
					var maybeDragStart = model.dragStart;
					var _p19 = maybeDragStart;
					_v14_2:
					do {
						if (_p19.ctor === 'Just') {
							switch (_p19._0.ctor) {
								case 'BrowserWindow':
									var _p20 = dragEnd;
									if (_p20.ctor === 'QueueWindow') {
										var _p21 = A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model.browser);
										var browser_ = _p21._0;
										var selectedSongItems = _user$project$Helpers$itemListToSongItemList(
											A2(
												_elm_lang$core$List$filter,
												function (_) {
													return _.isSelected;
												},
												_elm_lang$core$Dict$values(model.browser.items)));
										var queue_ = A2(
											_user$project$Queue$update,
											_user$project$Queue$Drop(selectedSongItems),
											model.queue);
										var selectedGroupItems = A2(
											_elm_lang$core$List$filter,
											function (_p22) {
												return !_user$project$Helpers$isSong(_p22);
											},
											A2(
												_elm_lang$core$List$filter,
												function (_) {
													return _.isSelected;
												},
												_elm_lang$core$Dict$values(model.browser.items)));
										var updateGroupCmds = _elm_lang$core$Platform_Cmd$batch(
											A2(_user$project$ApiHelpers$fetchSongsFromGroups, selectedGroupItems, _user$project$Main$AddSongsToQueue));
										return {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Native_Utils.update(
												model_,
												{queue: queue_, browser: browser_}),
											_1: updateGroupCmds
										};
									} else {
										return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
									}
								case 'QueueWindow':
									var _p23 = dragEnd;
									if (_p23.ctor === 'QueueWindow') {
										var queue_ = A2(_user$project$Queue$update, _user$project$Queue$Reorder, model.queue);
										return {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Native_Utils.update(
												model_,
												{queue: queue_}),
											_1: _elm_lang$core$Platform_Cmd$none
										};
									} else {
										var queue_ = A2(_user$project$Queue$update, _user$project$Queue$Remove, model.queue);
										return {
											ctor: '_Tuple2',
											_0: _elm_lang$core$Native_Utils.update(
												model_,
												{queue: queue_}),
											_1: _elm_lang$core$Platform_Cmd$none
										};
									}
								default:
									break _v14_2;
							}
						} else {
							break _v14_2;
						}
					} while(false);
					return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
				case 'MouseMoves':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{currentMousePos: _p3._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UpdateAlbumArt':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{albumArt: _p3._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UrlUpdate':
					var _p24 = _user$project$NavigationParser$urlParser(_p3._0);
					switch (_p24.ctor) {
						case 'ArtistsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllArtists(_user$project$Main$UpdateGroups)
							};
						case 'AlbumsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllAlbums(_user$project$Main$UpdateGroups)
							};
						case 'SongsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllSongs(_user$project$Main$UpdateSongs)
							};
						case 'ArtistRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: A2(_user$project$ApiHelpers$fetchSongsFromArtist, _p24._0, _user$project$Main$OpenSongsInBrowser)
							};
						case 'AlbumRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: A2(_user$project$ApiHelpers$fetchSongsFromAlbum, _p24._0, _user$project$Main$OpenSongsInBrowser)
							};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'PhoenixMsg':
					var _p25 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p3._0, model.socket);
					var socket_ = _p25._0;
					var phxCmd = _p25._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
					};
				case 'ReceiveChatMessage':
					var _p26 = A2(
						_user$project$Chat$update,
						_user$project$Chat$ReceiveMessage(_p3._0),
						model.chat);
					var chat_ = _p26._0;
					var chatCmd = _p26._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{chat: chat_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ReceiveNextSong':
					var queue_ = A2(_user$project$Queue$update, _user$project$Queue$NextSong, model.queue);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{queue: queue_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SendNextSong':
					var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'next_song', 'queue:lobby');
					var _p27 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p27._0;
					var socketCmd = _p27._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceivePreviousSong':
					var queue_ = A2(_user$project$Queue$update, _user$project$Queue$PreviousSong, model.queue);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{queue: queue_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SendPreviousSong':
					var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'previous_song', 'queue:lobby');
					var _p28 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p28._0;
					var socketCmd = _p28._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveAddSongs':
					var queue_ = A2(
						_user$project$Queue$update,
						_user$project$Queue$Drop(
							{ctor: '[]'}),
						model.queue);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{queue: queue_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						_p3._0,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'add_songs', 'queue:lobby'));
					var _p29 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p29._0;
					var socketCmd = _p29._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
			}
		}
	});
var _user$project$Main$ChatMsg = function (a) {
	return {ctor: 'ChatMsg', _0: a};
};
var _user$project$Main$chatView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$ChatMsg,
		_user$project$Chat$view(model.chat));
};
var _user$project$Main$BrowserMsg = function (a) {
	return {ctor: 'BrowserMsg', _0: a};
};
var _user$project$Main$browserView = function (model) {
	var maybeMousePos = function () {
		var _p30 = model.dragStart;
		if ((_p30.ctor === 'Just') && (_p30._0.ctor === 'BrowserWindow')) {
			return _elm_lang$core$Maybe$Just(model.currentMousePos);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$BrowserMsg,
		A2(_user$project$Browser$view, maybeMousePos, model.browser));
};
var _user$project$Main$QueueMsg = function (a) {
	return {ctor: 'QueueMsg', _0: a};
};
var _user$project$Main$queueView = function (model) {
	var maybeMousePos = function () {
		var _p31 = model.dragStart;
		if ((_p31.ctor === 'Just') && (_p31._0.ctor === 'QueueWindow')) {
			return _elm_lang$core$Maybe$Just(model.currentMousePos);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$QueueMsg,
		A2(_user$project$Queue$view, maybeMousePos, model.queue));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('main-container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$browserView(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$queueView(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$chatView(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$UrlUpdate,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
