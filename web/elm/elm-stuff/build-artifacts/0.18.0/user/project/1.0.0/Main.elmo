var _user$project$Main$currentMouseLocation = function (model) {
	return model.browser.isMouseOver ? _user$project$MyModels$BrowserWindow : (model.queue.mouseOver ? _user$project$MyModels$QueueWindow : _user$project$MyModels$OtherWindow);
};
var _user$project$Main$queueChannel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('queue:lobby');
var _user$project$Main$chatChannel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('room:lobby');
var _user$project$Main$socketServer = 'ws://localhost:4000/socket/websocket';
var _user$project$Main$initialModel = function (socket) {
	return {
		queue: {currentSong: 0, array: _elm_lang$core$Array$empty, mouseOver: false, mouseOverItem: 1},
		browser: _user$project$Browser$initialModel,
		chat: _user$project$Chat$initialModel,
		albumArt: 'nothing',
		currentMousePos: {x: 0, y: 0},
		keysBeingTyped: '',
		isShiftDown: false,
		socket: socket
	};
};
var _user$project$Main$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {browser: a, queue: b, chat: c, albumArt: d, currentMousePos: e, keysBeingTyped: f, isShiftDown: g, socket: h};
	});
var _user$project$Main$ReceiveSync = function (a) {
	return {ctor: 'ReceiveSync', _0: a};
};
var _user$project$Main$SendRemoveSong = function (a) {
	return {ctor: 'SendRemoveSong', _0: a};
};
var _user$project$Main$ReceiveRemoveSong = function (a) {
	return {ctor: 'ReceiveRemoveSong', _0: a};
};
var _user$project$Main$SendAddSongs = function (a) {
	return {ctor: 'SendAddSongs', _0: a};
};
var _user$project$Main$ReceiveAddSongs = function (a) {
	return {ctor: 'ReceiveAddSongs', _0: a};
};
var _user$project$Main$SendPreviousSong = {ctor: 'SendPreviousSong'};
var _user$project$Main$ReceivePreviousSong = function (a) {
	return {ctor: 'ReceivePreviousSong', _0: a};
};
var _user$project$Main$SendNextSong = {ctor: 'SendNextSong'};
var _user$project$Main$ReceiveNextSong = function (a) {
	return {ctor: 'ReceiveNextSong', _0: a};
};
var _user$project$Main$ReceiveChatMessage = function (a) {
	return {ctor: 'ReceiveChatMessage', _0: a};
};
var _user$project$Main$initialSocket = function () {
	var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'sync', 'queue:lobby');
	var _p0 = A2(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$join,
		_user$project$Main$chatChannel,
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			'sync',
			'queue:lobby',
			_user$project$Main$ReceiveSync,
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'remove_song',
				'queue:lobby',
				_user$project$Main$ReceiveRemoveSong,
				A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					'add_songs',
					'queue:lobby',
					_user$project$Main$ReceiveAddSongs,
					A4(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
						'previous_song',
						'queue:lobby',
						_user$project$Main$ReceivePreviousSong,
						A4(
							_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
							'next_song',
							'queue:lobby',
							_user$project$Main$ReceiveNextSong,
							A4(
								_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
								'new:msg',
								'room:lobby',
								_user$project$Main$ReceiveChatMessage,
								_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
									_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(_user$project$Main$socketServer)))))))));
	var socketMsg = _p0._0;
	var socketCmd = _p0._1;
	var _p1 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, _user$project$Main$queueChannel, socketMsg);
	var socketMsg_ = _p1._0;
	var socketCmd_ = _p1._1;
	var _p2 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, socketMsg_);
	var socketMsg__ = _p2._0;
	var socketCmd__ = _p2._1;
	return {
		ctor: '_Tuple2',
		_0: socketMsg__,
		_1: _elm_lang$core$Platform_Cmd$batch(
			{
				ctor: '::',
				_0: socketCmd__,
				_1: {
					ctor: '::',
					_0: socketCmd_,
					_1: {
						ctor: '::',
						_0: socketCmd,
						_1: {ctor: '[]'}
					}
				}
			})
	};
}();
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$init = function (location) {
	var _p3 = _user$project$Main$initialSocket;
	var socket = _p3._0;
	var socketCmd = _p3._1;
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$initialModel(socket),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
	};
};
var _user$project$Main$UrlUpdate = function (a) {
	return {ctor: 'UrlUpdate', _0: a};
};
var _user$project$Main$ResetKeysBeingTyped = function (a) {
	return {ctor: 'ResetKeysBeingTyped', _0: a};
};
var _user$project$Main$UpdateAlbumArt = function (a) {
	return {ctor: 'UpdateAlbumArt', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$KeyUp = function (a) {
	return {ctor: 'KeyUp', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$Port$resetKeysBeingTyped(_user$project$Main$ResetKeysBeingTyped),
			_1: {
				ctor: '::',
				_0: _user$project$Port$updateAlbumArt(_user$project$Main$UpdateAlbumArt),
				_1: {
					ctor: '::',
					_0: _elm_lang$keyboard$Keyboard$ups(_user$project$Main$KeyUp),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
						_1: {
							ctor: '::',
							_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.socket, _user$project$Main$PhoenixMsg),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Main$UpdateGroups = function (a) {
	return {ctor: 'UpdateGroups', _0: a};
};
var _user$project$Main$OpenSongsInBrowser = function (a) {
	return {ctor: 'OpenSongsInBrowser', _0: a};
};
var _user$project$Main$AddSongToQueue = function (a) {
	return {ctor: 'AddSongToQueue', _0: a};
};
var _user$project$Main$AddSongsToQueue = function (a) {
	return {ctor: 'AddSongsToQueue', _0: a};
};
var _user$project$Main$UpdateSongs = function (a) {
	return {ctor: 'UpdateSongs', _0: a};
};
var _user$project$Main$update = F2(
	function (action, model) {
		update:
		while (true) {
			var _p4 = action;
			switch (_p4.ctor) {
				case 'KeyUp':
					var textSearchUpdateHelper = function (code) {
						var maybefirstMatch = _elm_lang$core$List$head(
							A2(
								_elm_lang$core$List$filter,
								function (_p5) {
									var _p6 = _p5;
									return A2(
										_elm_lang$core$String$startsWith,
										model.keysBeingTyped,
										_elm_lang$core$String$toUpper(
											_user$project$Helpers$getItemTitle(_p6._1)));
								},
								_elm_lang$core$Dict$toList(model.browser.items)));
						var cString = _elm_lang$core$String$fromChar(
							_elm_lang$core$Char$fromCode(code));
						var _p7 = maybefirstMatch;
						if (_p7.ctor === 'Just') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										keysBeingTyped: A2(_elm_lang$core$Basics_ops['++'], model.keysBeingTyped, cString)
									}),
								_1: _user$project$Port$scrollToElement(
									A2(_elm_lang$core$Basics_ops['++'], 'group-item-', _p7._0._0))
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$Port$scrollToElement('no-id')
							};
						}
					};
					var _p8 = _p4._0;
					switch (_p8) {
						case 37:
							var _v4 = _user$project$Main$SendPreviousSong,
								_v5 = model;
							action = _v4;
							model = _v5;
							continue update;
						case 39:
							var _v6 = _user$project$Main$SendNextSong,
								_v7 = model;
							action = _v6;
							model = _v7;
							continue update;
						case 32:
							return (_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$String$length(model.keysBeingTyped),
								0) > 0) ? textSearchUpdateHelper(32) : {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$Port$pause('null')
							};
						case 16:
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{isShiftDown: false}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						default:
							return textSearchUpdateHelper(_p8);
					}
				case 'KeyDown':
					var _p9 = _p4._0;
					if (_p9 === 16) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{isShiftDown: true}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ResetKeysBeingTyped':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{keysBeingTyped: ''}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'QueueMsg':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								queue: A2(_user$project$Queue$update, _p4._0, model.queue)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'BrowserMsg':
					var _p10 = A3(_user$project$Browser$update, _p4._0, model.isShiftDown, model.browser);
					var browser_ = _p10._0;
					var browserCmd = _p10._1;
					var model_ = _elm_lang$core$Native_Utils.update(
						model,
						{browser: browser_});
					var _p11 = browserCmd;
					switch (_p11.ctor) {
						case 'AddItemToQueue':
							var _p13 = _p11._0;
							var _p12 = _p13.data;
							if (_p12.ctor === 'Song') {
								var songItemModels = _user$project$Helpers$makeSongItemList(
									{
										ctor: '::',
										_0: _p12._0,
										_1: {ctor: '[]'}
									});
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model_,
										{
											queue: A2(
												_user$project$Queue$update,
												_user$project$Queue$Drop(songItemModels),
												model.queue)
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								var updateGroupCmds = _elm_lang$core$Platform_Cmd$batch(
									A2(
										_user$project$ApiHelpers$fetchSongsFromGroups,
										{
											ctor: '::',
											_0: _p13,
											_1: {ctor: '[]'}
										},
										_user$project$Main$AddSongsToQueue));
								return {ctor: '_Tuple2', _0: model_, _1: updateGroupCmds};
							}
						case 'OpenGroup':
							var _p14 = _p11._0.data;
							if (_p14.ctor === 'Song') {
								return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							} else {
								var _p15 = _p14._0;
								return {
									ctor: '_Tuple2',
									_0: model_,
									_1: _elm_lang$navigation$Navigation$newUrl(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'#',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_p15.kind,
												A2(
													_elm_lang$core$Basics_ops['++'],
													'/',
													_elm_lang$core$Basics$toString(_p15.id)))))
								};
							}
						case 'ChangeRoute':
							var _p16 = _p11._0;
							switch (_p16.ctor) {
								case 'SongsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#songs')
									};
								case 'AlbumsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#albums')
									};
								case 'ArtistsRoute':
									return {
										ctor: '_Tuple2',
										_0: model_,
										_1: _elm_lang$navigation$Navigation$newUrl('#artists')
									};
								default:
									return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
							}
						case 'SendUpload':
							return {
								ctor: '_Tuple2',
								_0: model_,
								_1: _user$project$Port$upload('now')
							};
						default:
							return {ctor: '_Tuple2', _0: model_, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ChatMsg':
					var _p17 = A2(_user$project$Chat$update, _p4._0, model.chat);
					var chat_ = _p17._0;
					var chatCmd = _p17._1;
					var _p18 = chatCmd;
					if (_p18.ctor === 'PushMessage') {
						var payload = _elm_lang$core$Json_Encode$object(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'body',
									_1: _elm_lang$core$Json_Encode$string(_p18._0)
								},
								_1: {ctor: '[]'}
							});
						var push_ = A2(
							_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
							payload,
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'new:msg', 'room:lobby'));
						var _p19 = A2(
							_elm_lang$core$Debug$log,
							'socket and cmd are ',
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket));
						var socket_ = _p19._0;
						var socketCmd = _p19._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{chat: chat_, socket: socket_}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{chat: chat_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				case 'UpdateSongs':
					if (_p4._0.ctor === 'Ok') {
						var browser = _user$project$Browser$initialModel;
						var browser_ = _elm_lang$core$Native_Utils.update(
							browser,
							{
								items: _user$project$Helpers$makeSongItemDictionary(_p4._0._0)
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'UpdateGroups':
					if (_p4._0.ctor === 'Ok') {
						var browser = _user$project$Browser$initialModel;
						var browser_ = _elm_lang$core$Native_Utils.update(
							browser,
							{
								items: _user$project$Helpers$makeGroupItemDictionary(_p4._0._0)
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddSongsToQueue':
					if (_p4._0.ctor === 'Ok') {
						var _p20 = A2(
							_user$project$Main$update,
							_user$project$Main$SendAddSongs(_p4._0._0),
							model);
						var model_ = _p20._0;
						var socketCmds = _p20._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{
									browser: _elm_lang$core$Tuple$first(
										A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model_.browser))
								}),
							_1: socketCmds
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'AddSongToQueue':
					if (_p4._0.ctor === 'Ok') {
						var _p21 = A2(
							_user$project$Main$update,
							_user$project$Main$SendAddSongs(
								{
									ctor: '::',
									_0: _p4._0._0,
									_1: {ctor: '[]'}
								}),
							model);
						var model_ = _p21._0;
						var socketCmds = _p21._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model_,
								{
									browser: _elm_lang$core$Tuple$first(
										A3(_user$project$Browser$update, _user$project$Browser$Reset, false, model.browser))
								}),
							_1: socketCmds
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'OpenSongsInBrowser':
					if (_p4._0.ctor === 'Ok') {
						var newItems = _user$project$Helpers$makeSongItemDictionary(_p4._0._0);
						var _p22 = A3(
							_user$project$Browser$update,
							_user$project$Browser$UpdateSongs(newItems),
							model.isShiftDown,
							model.browser);
						var browser_ = _p22._0;
						var browserCmd = _p22._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{browser: browser_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'UpdateAlbumArt':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{albumArt: _p4._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'UrlUpdate':
					var _p23 = _user$project$NavigationParser$urlParser(_p4._0);
					switch (_p23.ctor) {
						case 'ArtistsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllArtists(_user$project$Main$UpdateGroups)
							};
						case 'AlbumsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllAlbums(_user$project$Main$UpdateGroups)
							};
						case 'SongsRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: _user$project$ApiHelpers$fetchAllSongs(_user$project$Main$UpdateSongs)
							};
						case 'ArtistRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: A2(_user$project$ApiHelpers$fetchSongsFromArtist, _p23._0, _user$project$Main$OpenSongsInBrowser)
							};
						case 'AlbumRoute':
							return {
								ctor: '_Tuple2',
								_0: model,
								_1: A2(_user$project$ApiHelpers$fetchSongsFromAlbum, _p23._0, _user$project$Main$OpenSongsInBrowser)
							};
						default:
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'PhoenixMsg':
					var _p24 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p4._0, model.socket);
					var socket_ = _p24._0;
					var phxCmd = _p24._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
					};
				case 'ReceiveChatMessage':
					var _p25 = A2(
						_user$project$Chat$update,
						_user$project$Chat$ReceiveMessage(_p4._0),
						model.chat);
					var chat_ = _p25._0;
					var chatCmd = _p25._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{chat: chat_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'ReceiveNextSong':
					var queue_ = A2(_user$project$Queue$update, _user$project$Queue$NextSong, model.queue);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{queue: queue_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SendNextSong':
					var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'next_song', 'queue:lobby');
					var _p26 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p26._0;
					var socketCmd = _p26._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceivePreviousSong':
					var queue_ = A2(_user$project$Queue$update, _user$project$Queue$PreviousSong, model.queue);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{queue: queue_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SendPreviousSong':
					var push_ = A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'previous_song', 'queue:lobby');
					var _p27 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p27._0;
					var socketCmd = _p27._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveAddSongs':
					var _p28 = _user$project$ApiHelpers$decodeSongs(_p4._0);
					if (_p28.ctor === 'Ok') {
						var queueItems = _user$project$Helpers$makeSongItemList(_p28._0);
						var queue_ = A2(
							_user$project$Queue$update,
							_user$project$Queue$Drop(queueItems),
							model.queue);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{queue: queue_}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'SendAddSongs':
					var json = _user$project$ApiHelpers$songsEncoder(
						_user$project$SortSongs$byAlbumAndTrack(_p4._0));
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						json,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'add_songs', 'queue:lobby'));
					var _p29 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p29._0;
					var socketCmd = _p29._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				case 'ReceiveRemoveSong':
					var queue_ = A2(
						_user$project$Queue$update,
						_user$project$Queue$Remove(_p4._0),
						model.queue);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{queue: queue_}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'SendRemoveSong':
					var payload = _elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'body',
								_1: _elm_lang$core$Json_Encode$int(_p4._0)
							},
							_1: {ctor: '[]'}
						});
					var push_ = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
						payload,
						A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'remove_song', 'queue:lobby'));
					var _p30 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.socket);
					var socket_ = _p30._0;
					var socketCmd = _p30._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{socket: socket_}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, socketCmd)
					};
				default:
					var _p31 = _user$project$ApiHelpers$decodeSync(_p4._0);
					if (_p31.ctor === 'Just') {
						var queueItems = A2(
							_elm_lang$core$Debug$log,
							'queue items',
							_user$project$Helpers$makeSongItemList(_p31._0._1));
						var queue_ = A2(
							_user$project$Queue$update,
							_user$project$Queue$Drop(queueItems),
							model.queue);
						var queue__ = _elm_lang$core$Native_Utils.update(
							queue_,
							{currentSong: _p31._0._0});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{queue: queue__}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var balh = _elm_lang$core$Debug$log(' error ');
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
			}
		}
	});
var _user$project$Main$ChatMsg = function (a) {
	return {ctor: 'ChatMsg', _0: a};
};
var _user$project$Main$chatView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$ChatMsg,
		_user$project$Chat$view(model.chat));
};
var _user$project$Main$BrowserMsg = function (a) {
	return {ctor: 'BrowserMsg', _0: a};
};
var _user$project$Main$browserView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$BrowserMsg,
		_user$project$Browser$view(model.browser));
};
var _user$project$Main$QueueMsg = function (a) {
	return {ctor: 'QueueMsg', _0: a};
};
var _user$project$Main$queueView = function (model) {
	return A2(
		_elm_lang$html$Html$map,
		_user$project$Main$QueueMsg,
		_user$project$Queue$view(model.queue));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('main-container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$browserView(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$queueView(model),
				_1: {
					ctor: '::',
					_0: _user$project$Main$chatView(model),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$UrlUpdate,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
